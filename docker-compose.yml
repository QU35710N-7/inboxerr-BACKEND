version: '3.8'

services:
  # API service
  api:
    build: .
    container_name: inboxerr-api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/inboxerr
      - SMS_GATEWAY_URL=${SMS_GATEWAY_URL:-https://endpointnumber1.work.gd/api/3rdparty/v1}
      - SMS_GATEWAY_LOGIN=${SMS_GATEWAY_LOGIN:-}
      - SMS_GATEWAY_PASSWORD=${SMS_GATEWAY_PASSWORD:-}
      - SECRET_KEY=${SECRET_KEY:-CHANGEME_IN_PRODUCTION}
      - WEBHOOK_HOST=0.0.0.0
      - WEBHOOK_PORT=5000
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - inboxerr-network
    restart: unless-stopped

  # Database service
  db:
    image: postgres:14-alpine
    container_name: inboxerr-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inboxerr
    ports:
      - "5432:5432"
    networks:
      - inboxerr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Database initialization service
  db-init:
    build: .
    container_name: inboxerr-db-init
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Creating admin user...' &&
        python app/scripts/create_admin.py &&
        echo 'Database initialization completed.'
      "
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/inboxerr
      - SECRET_KEY=${SECRET_KEY:-CHANGEME_IN_PRODUCTION}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - inboxerr-network
    restart: "no"  # Run once and exit

  # Optional: Redis for caching and task queue
  redis:
    image: redis:alpine
    container_name: inboxerr-redis
    ports:
      - "6379:6379"
    networks:
      - inboxerr-network
    restart: unless-stopped

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: inboxerr-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@inboxerr.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - inboxerr-network
    restart: unless-stopped

networks:
  inboxerr-network:
    driver: bridge

volumes:
  postgres_data: